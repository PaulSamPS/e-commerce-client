/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * e-commerce
 * API Documentation
 * OpenAPI spec version: 1.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export type LoginResponseTypeUser = { [key: string]: any };

export interface LoginResponseType {
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—Ö–æ–¥–∞ */
  message: string;
  /** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */
  user: LoginResponseTypeUser;
}

export interface LoginUserDto {
  /** –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  email: string;
  /**
   * –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @minimum 5
   */
  password: string;
}

export interface ActivateResponseType {
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ */
  message: string;
}

export interface ActivateUserDto {
  /**
   * –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—á–µ—Ç—ã—Ä–µ —Ü–∏—Ñ—Ä—ã)
   * @minimum 4
   * @maximum 4
   */
  code: string;
  /** Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  email: string;
}

export interface RegistrationResponseType {
  /** –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */
  message: string;
}

export interface CreateUserDto {
  /** –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  email: string;
  /** –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  password: string;
  /** –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  username: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const register = (
  createUserDto: BodyType<CreateUserDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<RegistrationResponseType>(
    {
      url: `/users/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createUserDto,
    },
    options,
  );
};

export const activate = (
  activateUserDto: BodyType<ActivateUserDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<ActivateResponseType>(
    {
      url: `/users/activate`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: activateUserDto,
    },
    options,
  );
};

export const login = (
  loginUserDto: BodyType<LoginUserDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<LoginResponseType>(
    {
      url: `/users/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginUserDto,
    },
    options,
  );
};

export const refreshToken = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/users/refresh-token`, method: "GET" },
    options,
  );
};

export type RegisterResult = NonNullable<Awaited<ReturnType<typeof register>>>;
export type ActivateResult = NonNullable<Awaited<ReturnType<typeof activate>>>;
export type LoginResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type RefreshTokenResult = NonNullable<
  Awaited<ReturnType<typeof refreshToken>>
>;
