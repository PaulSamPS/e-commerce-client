/**
 * Generated by orval v6.27.1 üç∫
 * Do not edit manually.
 * e-commerce
 * API Documentation
 * OpenAPI spec version: 1.0
 */
import { createInstance } from "./api-instance";

export interface User {
  id: number;
  email: string;
  username: string;
}

export interface LoginResponse {
  message: string;
  user: User;
}

export interface ActivateResponse {
  message: string;
}

export interface RegistrationResponse {
  message: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ API
export interface CreateUserDto {
  email: string;
  password: string;
  username: string;
}

export interface ActivateUserDto {
  code: string;
  email: string;
}

export interface LoginUserDto {
  email: string;
  password: string;
}

// –û–±—â–∏–π —Ç–∏–ø –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ options
type RequestOptions = Parameters<typeof createInstance>[1];

export const register = (
  createUserDto: CreateUserDto,
  options?: RequestOptions,
) => {
  return createInstance<RegistrationResponse>(
    {
      url: `/users/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createUserDto,
    },
    options,
  );
};

export const activate = (
  activateUserDto: ActivateUserDto,
  options?: RequestOptions,
) => {
  return createInstance<ActivateResponse>(
    {
      url: `/users/activate`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: activateUserDto,
    },
    options,
  );
};

export const login = (loginUserDto: LoginUserDto, options?: RequestOptions) => {
  return createInstance<LoginResponse>(
    {
      url: `/users/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginUserDto,
    },
    options,
  );
};

export const refreshToken = (options?: RequestOptions) => {
  return createInstance<LoginResponse>(
    { url: `/users/refresh-token`, method: "GET" },
    options,
  );
};

// –¢–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
export type RegisterResult = Awaited<ReturnType<typeof register>>;
export type ActivateResult = Awaited<ReturnType<typeof activate>>;
export type LoginResult = Awaited<ReturnType<typeof login>>;
export type RefreshTokenResult = Awaited<ReturnType<typeof refreshToken>>;
